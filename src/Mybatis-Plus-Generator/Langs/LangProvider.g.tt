<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
const string resourceFileName = "Lang.resx";
var propertyNameList = XElement.Load(this.Host.ResolvePath(resourceFileName))
    .Elements("data")
    .Select(item => 
        item.Attribute("name")?
            .Value
            .Replace(' ','_')
            .Replace('(','_')
            .Replace(')','_'))
    .Where(item => item != null).ToList();

var langDic = new Dictionary<string, string>();
foreach(var item in propertyNameList)
{
    langDic[item] = 
    @$"/// <summary>
    /// {item}
    /// </summary>";
}
#>
using System.ComponentModel;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
#nullable enable

namespace <#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString()#>;

public class LangProvider : INotifyPropertyChanged
{
    internal static LangProvider Instance { get; } = Application.Current.TryFindResource(nameof(Langs)) as LangProvider ?? default!;

    private static string? CultureInfoStr;

    public static CultureInfo? Culture
    {
        get => Lang.Culture;
        set
        {
            if (value == null) return;
            if (Equals(CultureInfoStr, value.EnglishName)) return;
            Lang.Culture = value;
            CultureInfoStr = value.EnglishName;
            Instance.UpdateLangs();
        }
    }

    public static string? GetLang(string key) => Lang.ResourceManager.GetString(key, Culture);

    public static void SetLang(DependencyObject dependencyObject, DependencyProperty dependencyProperty, string key)
    {
        BindingOperations.SetBinding(dependencyObject, dependencyProperty, new Binding(key)
        {
            Source = Instance,
            Mode = BindingMode.OneWay
        });
    }

	private void UpdateLangs()
    {
<#foreach(var item in propertyNameList){#>
		OnPropertyChanged(nameof(<#=item#>));
<#}#>
    }

<#foreach(var item in propertyNameList){#>
    <#=langDic[item]#>
	public string <#=item#> => Lang.<#=item#>;

<#}#>

    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

public class LangKeys
{
<#foreach(var item in propertyNameList){#>
    <#=langDic[item]#>
	public static string <#=item#> = nameof(<#=item#>);

<#}#>
}
